//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ARSoft.Claim.Model.EntityFramework
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CLAIMEntities : DbContext
    {
        public CLAIMEntities()
            : base("name=CLAIMEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<MAS_BRANDS> MAS_BRANDS { get; set; }
        public virtual DbSet<MAS_CHARGE_CATEGORY> MAS_CHARGE_CATEGORY { get; set; }
        public virtual DbSet<MAS_CHARGES> MAS_CHARGES { get; set; }
        public virtual DbSet<MAS_CLASSIFICATION> MAS_CLASSIFICATION { get; set; }
        public virtual DbSet<MAS_CLASSIFICATIONCONTROL> MAS_CLASSIFICATIONCONTROL { get; set; }
        public virtual DbSet<MAS_CORE_BUSINESS_COMPANY> MAS_CORE_BUSINESS_COMPANY { get; set; }
        public virtual DbSet<MAS_CUSTOMER_CONTACTS> MAS_CUSTOMER_CONTACTS { get; set; }
        public virtual DbSet<MAS_CUSTOMER_GROUPS> MAS_CUSTOMER_GROUPS { get; set; }
        public virtual DbSet<MAS_CUSTOMER_IP> MAS_CUSTOMER_IP { get; set; }
        public virtual DbSet<MAS_CUSTOMER_LOCATIONS> MAS_CUSTOMER_LOCATIONS { get; set; }
        public virtual DbSet<MAS_CUSTOMERS> MAS_CUSTOMERS { get; set; }
        public virtual DbSet<MAS_DOC_CONTROL> MAS_DOC_CONTROL { get; set; }
        public virtual DbSet<MAS_EMAIL_TEMPLATE> MAS_EMAIL_TEMPLATE { get; set; }
        public virtual DbSet<MAS_EMPLOYEES> MAS_EMPLOYEES { get; set; }
        public virtual DbSet<MAS_MASTER_SETUP> MAS_MASTER_SETUP { get; set; }
        public virtual DbSet<MAS_PRODUCT_GROUPS> MAS_PRODUCT_GROUPS { get; set; }
        public virtual DbSet<MAS_PRODUCTS> MAS_PRODUCTS { get; set; }
        public virtual DbSet<MAS_SLA_COMPUTE_SETTINGS> MAS_SLA_COMPUTE_SETTINGS { get; set; }
        public virtual DbSet<MAS_SUPPLIER_CONTACTS> MAS_SUPPLIER_CONTACTS { get; set; }
        public virtual DbSet<MAS_SUPPLIERS> MAS_SUPPLIERS { get; set; }
        public virtual DbSet<MAS_ZONE> MAS_ZONE { get; set; }
        public virtual DbSet<SYS_AUTHORIZATION_LOGS> SYS_AUTHORIZATION_LOGS { get; set; }
        public virtual DbSet<SYS_AUTHORIZED_APPLICATIONS> SYS_AUTHORIZED_APPLICATIONS { get; set; }
        public virtual DbSet<SYS_COMMON_MESSAGES> SYS_COMMON_MESSAGES { get; set; }
        public virtual DbSet<SYS_COMPONENTS> SYS_COMPONENTS { get; set; }
        public virtual DbSet<SYS_CONFIGS> SYS_CONFIGS { get; set; }
        public virtual DbSet<SYS_DISTRICTS> SYS_DISTRICTS { get; set; }
        public virtual DbSet<SYS_DOCUMENT_PATTERNS> SYS_DOCUMENT_PATTERNS { get; set; }
        public virtual DbSet<SYS_EMAIL_CONFIGS> SYS_EMAIL_CONFIGS { get; set; }
        public virtual DbSet<SYS_PERMISSIONS> SYS_PERMISSIONS { get; set; }
        public virtual DbSet<SYS_PROVINCES> SYS_PROVINCES { get; set; }
        public virtual DbSet<SYS_ROLES> SYS_ROLES { get; set; }
        public virtual DbSet<SYS_ROLES_PERMISSIONS> SYS_ROLES_PERMISSIONS { get; set; }
        public virtual DbSet<SYS_SERVICES_PROCESS> SYS_SERVICES_PROCESS { get; set; }
        public virtual DbSet<SYS_SYSTEM_LOGS> SYS_SYSTEM_LOGS { get; set; }
        public virtual DbSet<SYS_USERS> SYS_USERS { get; set; }
        public virtual DbSet<SYS_USERS_ROLES> SYS_USERS_ROLES { get; set; }
        public virtual DbSet<TRN_JOBS> TRN_JOBS { get; set; }
        public virtual DbSet<TRX_ERROR_LOG> TRX_ERROR_LOG { get; set; }
    
        public virtual int do_not_delet(Nullable<int> month, Nullable<int> year)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("do_not_delet", monthParameter, yearParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspCheckDeleteClassification(Nullable<int> groupID, Nullable<int> parentID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspCheckDeleteClassification", groupIDParameter, parentIDParameter);
        }
    
        public virtual int uspDeleteSysUsersByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteSysUsersByID", iDParameter);
        }
    
        public virtual ObjectResult<uspGetAuthorizedMenus_Result> uspGetAuthorizedMenus(string userName, Nullable<byte> parentID, Nullable<byte> levels, Nullable<byte> types, Nullable<bool> withSystem, string currentUrl)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("parentID", parentID) :
                new ObjectParameter("parentID", typeof(byte));
    
            var levelsParameter = levels.HasValue ?
                new ObjectParameter("levels", levels) :
                new ObjectParameter("levels", typeof(byte));
    
            var typesParameter = types.HasValue ?
                new ObjectParameter("types", types) :
                new ObjectParameter("types", typeof(byte));
    
            var withSystemParameter = withSystem.HasValue ?
                new ObjectParameter("withSystem", withSystem) :
                new ObjectParameter("withSystem", typeof(bool));
    
            var currentUrlParameter = currentUrl != null ?
                new ObjectParameter("currentUrl", currentUrl) :
                new ObjectParameter("currentUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAuthorizedMenus_Result>("uspGetAuthorizedMenus", userNameParameter, parentIDParameter, levelsParameter, typesParameter, withSystemParameter, currentUrlParameter);
        }
    
        public virtual ObjectResult<uspGetChildRolePermissionByRoleID_Result> uspGetChildRolePermissionByRoleID(Nullable<int> type, Nullable<int> roleId, Nullable<int> level, Nullable<int> parentId)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetChildRolePermissionByRoleID_Result>("uspGetChildRolePermissionByRoleID", typeParameter, roleIdParameter, levelParameter, parentIdParameter);
        }
    
        public virtual ObjectResult<uspGetCusContactById_Result> uspGetCusContactById(Nullable<int> pageIndex, Nullable<int> pageSize, string sorting, Nullable<int> customerID)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortingParameter = sorting != null ?
                new ObjectParameter("Sorting", sorting) :
                new ObjectParameter("Sorting", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetCusContactById_Result>("uspGetCusContactById", pageIndexParameter, pageSizeParameter, sortingParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<uspGetCusLocationById_Result> uspGetCusLocationById(Nullable<int> pageIndex, Nullable<int> pageSize, string sorting, Nullable<int> customerID)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortingParameter = sorting != null ?
                new ObjectParameter("Sorting", sorting) :
                new ObjectParameter("Sorting", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetCusLocationById_Result>("uspGetCusLocationById", pageIndexParameter, pageSizeParameter, sortingParameter, customerIDParameter);
        }
    
        public virtual int uspGetCusLocationContact(Nullable<int> pageIndex, Nullable<int> pageSize, string sorting, Nullable<long> customerID, string locationName, string contactName)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortingParameter = sorting != null ?
                new ObjectParameter("Sorting", sorting) :
                new ObjectParameter("Sorting", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(long));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetCusLocationContact", pageIndexParameter, pageSizeParameter, sortingParameter, customerIDParameter, locationNameParameter, contactNameParameter);
        }
    
        public virtual ObjectResult<uspGetCustomerContactListByID_Result> uspGetCustomerContactListByID(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetCustomerContactListByID_Result>("uspGetCustomerContactListByID", customerIDParameter);
        }
    
        public virtual ObjectResult<uspGetCustomers_Result> uspGetCustomers(Nullable<int> pageIndex, Nullable<int> pageSize, string sorting, string code, string name, string sTypeID, Nullable<byte> status, Nullable<byte> searchType)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortingParameter = sorting != null ?
                new ObjectParameter("Sorting", sorting) :
                new ObjectParameter("Sorting", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sTypeIDParameter = sTypeID != null ?
                new ObjectParameter("sTypeID", sTypeID) :
                new ObjectParameter("sTypeID", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var searchTypeParameter = searchType.HasValue ?
                new ObjectParameter("SearchType", searchType) :
                new ObjectParameter("SearchType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetCustomers_Result>("uspGetCustomers", pageIndexParameter, pageSizeParameter, sortingParameter, codeParameter, nameParameter, sTypeIDParameter, statusParameter, searchTypeParameter);
        }
    
        public virtual ObjectResult<uspGetListOfClassification_Result> uspGetListOfClassification(Nullable<int> pageIndex, Nullable<int> pageSize, string sorting, string code, string name, string strStatus, Nullable<int> groupID, Nullable<byte> uses)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortingParameter = sorting != null ?
                new ObjectParameter("Sorting", sorting) :
                new ObjectParameter("Sorting", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var strStatusParameter = strStatus != null ?
                new ObjectParameter("StrStatus", strStatus) :
                new ObjectParameter("StrStatus", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var usesParameter = uses.HasValue ?
                new ObjectParameter("Uses", uses) :
                new ObjectParameter("Uses", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetListOfClassification_Result>("uspGetListOfClassification", pageIndexParameter, pageSizeParameter, sortingParameter, codeParameter, nameParameter, strStatusParameter, groupIDParameter, usesParameter);
        }
    
        public virtual ObjectResult<uspGetListOfCustomer_Result> uspGetListOfCustomer(Nullable<int> pageIndex, Nullable<int> pageSize, string sorting, string customerCode, string customerName)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortingParameter = sorting != null ?
                new ObjectParameter("Sorting", sorting) :
                new ObjectParameter("Sorting", typeof(string));
    
            var customerCodeParameter = customerCode != null ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetListOfCustomer_Result>("uspGetListOfCustomer", pageIndexParameter, pageSizeParameter, sortingParameter, customerCodeParameter, customerNameParameter);
        }
    
        public virtual ObjectResult<uspGetListOfEmployees_Result> uspGetListOfEmployees(Nullable<int> pageIndex, Nullable<int> pageSize, string sorting, string code, string name, Nullable<int> buID)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortingParameter = sorting != null ?
                new ObjectParameter("Sorting", sorting) :
                new ObjectParameter("Sorting", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var buIDParameter = buID.HasValue ?
                new ObjectParameter("BuID", buID) :
                new ObjectParameter("BuID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetListOfEmployees_Result>("uspGetListOfEmployees", pageIndexParameter, pageSizeParameter, sortingParameter, codeParameter, nameParameter, buIDParameter);
        }
    
        public virtual ObjectResult<uspGetListOfSysRole_Result> uspGetListOfSysRole(Nullable<int> pageIndex, Nullable<int> pageSize, string sorting, string roleCode, string roleDescription, string strStatus)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortingParameter = sorting != null ?
                new ObjectParameter("Sorting", sorting) :
                new ObjectParameter("Sorting", typeof(string));
    
            var roleCodeParameter = roleCode != null ?
                new ObjectParameter("RoleCode", roleCode) :
                new ObjectParameter("RoleCode", typeof(string));
    
            var roleDescriptionParameter = roleDescription != null ?
                new ObjectParameter("RoleDescription", roleDescription) :
                new ObjectParameter("RoleDescription", typeof(string));
    
            var strStatusParameter = strStatus != null ?
                new ObjectParameter("StrStatus", strStatus) :
                new ObjectParameter("StrStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetListOfSysRole_Result>("uspGetListOfSysRole", pageIndexParameter, pageSizeParameter, sortingParameter, roleCodeParameter, roleDescriptionParameter, strStatusParameter);
        }
    
        public virtual int uspGetListToSendMail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetListToSendMail");
        }
    
        public virtual int uspGetListToSendMailPM(Nullable<int> waitToSendToPM)
        {
            var waitToSendToPMParameter = waitToSendToPM.HasValue ?
                new ObjectParameter("WaitToSendToPM", waitToSendToPM) :
                new ObjectParameter("WaitToSendToPM", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetListToSendMailPM", waitToSendToPMParameter);
        }
    
        public virtual ObjectResult<uspGetPermissions_Result> uspGetPermissions(string username, string functionCode, Nullable<int> masterID)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var functionCodeParameter = functionCode != null ?
                new ObjectParameter("FunctionCode", functionCode) :
                new ObjectParameter("FunctionCode", typeof(string));
    
            var masterIDParameter = masterID.HasValue ?
                new ObjectParameter("MasterID", masterID) :
                new ObjectParameter("MasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetPermissions_Result>("uspGetPermissions", usernameParameter, functionCodeParameter, masterIDParameter);
        }
    
        public virtual ObjectResult<uspGetProducts_Result> uspGetProducts(Nullable<int> pageIndex, Nullable<int> pageSize, string sorting, string productName, Nullable<byte> productGroupID)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortingParameter = sorting != null ?
                new ObjectParameter("Sorting", sorting) :
                new ObjectParameter("Sorting", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var productGroupIDParameter = productGroupID.HasValue ?
                new ObjectParameter("ProductGroupID", productGroupID) :
                new ObjectParameter("ProductGroupID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetProducts_Result>("uspGetProducts", pageIndexParameter, pageSizeParameter, sortingParameter, productNameParameter, productGroupIDParameter);
        }
    
        public virtual ObjectResult<uspGetRoleList_Result> uspGetRoleList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetRoleList_Result>("uspGetRoleList");
        }
    
        public virtual ObjectResult<uspGetRolePermissionByRoleID_Result> uspGetRolePermissionByRoleID(Nullable<int> type, Nullable<int> roleId, Nullable<int> level)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetRolePermissionByRoleID_Result>("uspGetRolePermissionByRoleID", typeParameter, roleIdParameter, levelParameter);
        }
    
        public virtual ObjectResult<uspGetRolePermissions_Result> uspGetRolePermissions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetRolePermissions_Result>("uspGetRolePermissions");
        }
    
        public virtual ObjectResult<uspGetRoles_Result> uspGetRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetRoles_Result>("uspGetRoles");
        }
    
        public virtual ObjectResult<string> uspGetRunningCode(string codeFieldName, string tableName, string findTemplate)
        {
            var codeFieldNameParameter = codeFieldName != null ?
                new ObjectParameter("codeFieldName", codeFieldName) :
                new ObjectParameter("codeFieldName", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var findTemplateParameter = findTemplate != null ?
                new ObjectParameter("findTemplate", findTemplate) :
                new ObjectParameter("findTemplate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspGetRunningCode", codeFieldNameParameter, tableNameParameter, findTemplateParameter);
        }
    
        public virtual ObjectResult<uspGetSupplierContacts_Result> uspGetSupplierContacts(Nullable<int> pageIndex, Nullable<int> pageSize, string sorting, Nullable<int> supplierID)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortingParameter = sorting != null ?
                new ObjectParameter("Sorting", sorting) :
                new ObjectParameter("Sorting", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSupplierContacts_Result>("uspGetSupplierContacts", pageIndexParameter, pageSizeParameter, sortingParameter, supplierIDParameter);
        }
    
        public virtual int uspGetSuppliers(Nullable<int> pageIndex, Nullable<int> pageSize, string sorting, string supplierCode, string supplierName, string typeID, Nullable<byte> status)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortingParameter = sorting != null ?
                new ObjectParameter("Sorting", sorting) :
                new ObjectParameter("Sorting", typeof(string));
    
            var supplierCodeParameter = supplierCode != null ?
                new ObjectParameter("SupplierCode", supplierCode) :
                new ObjectParameter("SupplierCode", typeof(string));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var typeIDParameter = typeID != null ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetSuppliers", pageIndexParameter, pageSizeParameter, sortingParameter, supplierCodeParameter, supplierNameParameter, typeIDParameter, statusParameter);
        }
    
        public virtual ObjectResult<uspGetSysUserRolesByUserID_Result> uspGetSysUserRolesByUserID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSysUserRolesByUserID_Result>("uspGetSysUserRolesByUserID", iDParameter);
        }
    
        public virtual ObjectResult<uspGetSysUsers_Result> uspGetSysUsers(Nullable<int> pageIndex, Nullable<int> pageSize, string sorting, string username, string roleID)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortingParameter = sorting != null ?
                new ObjectParameter("Sorting", sorting) :
                new ObjectParameter("Sorting", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var roleIDParameter = roleID != null ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSysUsers_Result>("uspGetSysUsers", pageIndexParameter, pageSizeParameter, sortingParameter, usernameParameter, roleIDParameter);
        }
    
        public virtual ObjectResult<uspGetSysUsersByUserName_Result> uspGetSysUsersByUserName(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSysUsersByUserName_Result>("uspGetSysUsersByUserName", usernameParameter);
        }
    
        public virtual int uspGetUserProfile(Nullable<int> sysUser)
        {
            var sysUserParameter = sysUser.HasValue ?
                new ObjectParameter("SysUser", sysUser) :
                new ObjectParameter("SysUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetUserProfile", sysUserParameter);
        }
    
        public virtual ObjectResult<uspGetUserRoles_Result> uspGetUserRoles(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUserRoles_Result>("uspGetUserRoles", userNameParameter);
        }
    
        public virtual int uspInsertRole(string roleName, string description, Nullable<int> admin, Nullable<int> status, string user)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var adminParameter = admin.HasValue ?
                new ObjectParameter("Admin", admin) :
                new ObjectParameter("Admin", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertRole", roleNameParameter, descriptionParameter, adminParameter, statusParameter, userParameter);
        }
    
        public virtual int uspUpdateSysUserInRolesByID(Nullable<int> userID, Nullable<int> updatedBy, string strRoleID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var strRoleIDParameter = strRoleID != null ?
                new ObjectParameter("StrRoleID", strRoleID) :
                new ObjectParameter("StrRoleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateSysUserInRolesByID", userIDParameter, updatedByParameter, strRoleIDParameter);
        }
    
        public virtual int uspUpdateSysUserRolesByID(Nullable<int> iD, string username, string password, string displayName, string email, Nullable<int> employeeID, Nullable<byte> status, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, string strRoleID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var strRoleIDParameter = strRoleID != null ?
                new ObjectParameter("StrRoleID", strRoleID) :
                new ObjectParameter("StrRoleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateSysUserRolesByID", iDParameter, usernameParameter, passwordParameter, displayNameParameter, emailParameter, employeeIDParameter, statusParameter, updatedByParameter, updatedDateParameter, strRoleIDParameter);
        }
    
        public virtual int uspVerifyExistingToken(string accessToken, ObjectParameter result)
        {
            var accessTokenParameter = accessToken != null ?
                new ObjectParameter("accessToken", accessToken) :
                new ObjectParameter("accessToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspVerifyExistingToken", accessTokenParameter, result);
        }
    }
}
